/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignedInRouteImport } from './routes/_signed-in'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PostsIndexRouteImport } from './routes/posts.index'
import { Route as SignInSplatRouteImport } from './routes/sign-in.$'
import { Route as PostsPostIdRouteImport } from './routes/posts.$postId'
import { Route as SignedInStatusesRouteImport } from './routes/_signed-in/statuses'
import { Route as SignedInLabelsRouteImport } from './routes/_signed-in/labels'
import { Route as SignedInDashboardRouteImport } from './routes/_signed-in/dashboard'
import { Route as PostsPostIdDeepRouteImport } from './routes/posts_.$postId.deep'
import { Route as SignedInProjectsNewRouteImport } from './routes/_signed-in/projects.new'
import { Route as SignedInProjectsProjectIdTasksRouteImport } from './routes/_signed-in/projects.$projectId.tasks'
import { Route as SignedInProjectsProjectIdTasksTaskIdRouteImport } from './routes/_signed-in/projects.$projectId.tasks.$taskId'
import { ServerRoute as ApiUploadthingServerRouteImport } from './routes/api/uploadthing'

const rootServerRouteImport = createServerRootRoute()

const SignedInRoute = SignedInRouteImport.update({
  id: '/_signed-in',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsIndexRoute = PostsIndexRouteImport.update({
  id: '/posts/',
  path: '/posts/',
  getParentRoute: () => rootRouteImport,
} as any)
const SignInSplatRoute = SignInSplatRouteImport.update({
  id: '/sign-in/$',
  path: '/sign-in/$',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsPostIdRoute = PostsPostIdRouteImport.update({
  id: '/posts/$postId',
  path: '/posts/$postId',
  getParentRoute: () => rootRouteImport,
} as any)
const SignedInStatusesRoute = SignedInStatusesRouteImport.update({
  id: '/statuses',
  path: '/statuses',
  getParentRoute: () => SignedInRoute,
} as any)
const SignedInLabelsRoute = SignedInLabelsRouteImport.update({
  id: '/labels',
  path: '/labels',
  getParentRoute: () => SignedInRoute,
} as any)
const SignedInDashboardRoute = SignedInDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => SignedInRoute,
} as any)
const PostsPostIdDeepRoute = PostsPostIdDeepRouteImport.update({
  id: '/posts_/$postId/deep',
  path: '/posts/$postId/deep',
  getParentRoute: () => rootRouteImport,
} as any)
const SignedInProjectsNewRoute = SignedInProjectsNewRouteImport.update({
  id: '/projects/new',
  path: '/projects/new',
  getParentRoute: () => SignedInRoute,
} as any)
const SignedInProjectsProjectIdTasksRoute =
  SignedInProjectsProjectIdTasksRouteImport.update({
    id: '/projects/$projectId/tasks',
    path: '/projects/$projectId/tasks',
    getParentRoute: () => SignedInRoute,
  } as any)
const SignedInProjectsProjectIdTasksTaskIdRoute =
  SignedInProjectsProjectIdTasksTaskIdRouteImport.update({
    id: '/$taskId',
    path: '/$taskId',
    getParentRoute: () => SignedInProjectsProjectIdTasksRoute,
  } as any)
const ApiUploadthingServerRoute = ApiUploadthingServerRouteImport.update({
  id: '/api/uploadthing',
  path: '/api/uploadthing',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof SignedInDashboardRoute
  '/labels': typeof SignedInLabelsRoute
  '/statuses': typeof SignedInStatusesRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/sign-in/$': typeof SignInSplatRoute
  '/posts': typeof PostsIndexRoute
  '/projects/new': typeof SignedInProjectsNewRoute
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
  '/projects/$projectId/tasks': typeof SignedInProjectsProjectIdTasksRouteWithChildren
  '/projects/$projectId/tasks/$taskId': typeof SignedInProjectsProjectIdTasksTaskIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof SignedInDashboardRoute
  '/labels': typeof SignedInLabelsRoute
  '/statuses': typeof SignedInStatusesRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/sign-in/$': typeof SignInSplatRoute
  '/posts': typeof PostsIndexRoute
  '/projects/new': typeof SignedInProjectsNewRoute
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
  '/projects/$projectId/tasks': typeof SignedInProjectsProjectIdTasksRouteWithChildren
  '/projects/$projectId/tasks/$taskId': typeof SignedInProjectsProjectIdTasksTaskIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_signed-in': typeof SignedInRouteWithChildren
  '/_signed-in/dashboard': typeof SignedInDashboardRoute
  '/_signed-in/labels': typeof SignedInLabelsRoute
  '/_signed-in/statuses': typeof SignedInStatusesRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/sign-in/$': typeof SignInSplatRoute
  '/posts/': typeof PostsIndexRoute
  '/_signed-in/projects/new': typeof SignedInProjectsNewRoute
  '/posts_/$postId/deep': typeof PostsPostIdDeepRoute
  '/_signed-in/projects/$projectId/tasks': typeof SignedInProjectsProjectIdTasksRouteWithChildren
  '/_signed-in/projects/$projectId/tasks/$taskId': typeof SignedInProjectsProjectIdTasksTaskIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/labels'
    | '/statuses'
    | '/posts/$postId'
    | '/sign-in/$'
    | '/posts'
    | '/projects/new'
    | '/posts/$postId/deep'
    | '/projects/$projectId/tasks'
    | '/projects/$projectId/tasks/$taskId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/labels'
    | '/statuses'
    | '/posts/$postId'
    | '/sign-in/$'
    | '/posts'
    | '/projects/new'
    | '/posts/$postId/deep'
    | '/projects/$projectId/tasks'
    | '/projects/$projectId/tasks/$taskId'
  id:
    | '__root__'
    | '/'
    | '/_signed-in'
    | '/_signed-in/dashboard'
    | '/_signed-in/labels'
    | '/_signed-in/statuses'
    | '/posts/$postId'
    | '/sign-in/$'
    | '/posts/'
    | '/_signed-in/projects/new'
    | '/posts_/$postId/deep'
    | '/_signed-in/projects/$projectId/tasks'
    | '/_signed-in/projects/$projectId/tasks/$taskId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SignedInRoute: typeof SignedInRouteWithChildren
  PostsPostIdRoute: typeof PostsPostIdRoute
  SignInSplatRoute: typeof SignInSplatRoute
  PostsIndexRoute: typeof PostsIndexRoute
  PostsPostIdDeepRoute: typeof PostsPostIdDeepRoute
}
export interface FileServerRoutesByFullPath {
  '/api/uploadthing': typeof ApiUploadthingServerRoute
}
export interface FileServerRoutesByTo {
  '/api/uploadthing': typeof ApiUploadthingServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/uploadthing': typeof ApiUploadthingServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/uploadthing'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/uploadthing'
  id: '__root__' | '/api/uploadthing'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiUploadthingServerRoute: typeof ApiUploadthingServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_signed-in': {
      id: '/_signed-in'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof SignedInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts/': {
      id: '/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign-in/$': {
      id: '/sign-in/$'
      path: '/sign-in/$'
      fullPath: '/sign-in/$'
      preLoaderRoute: typeof SignInSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/posts/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_signed-in/statuses': {
      id: '/_signed-in/statuses'
      path: '/statuses'
      fullPath: '/statuses'
      preLoaderRoute: typeof SignedInStatusesRouteImport
      parentRoute: typeof SignedInRoute
    }
    '/_signed-in/labels': {
      id: '/_signed-in/labels'
      path: '/labels'
      fullPath: '/labels'
      preLoaderRoute: typeof SignedInLabelsRouteImport
      parentRoute: typeof SignedInRoute
    }
    '/_signed-in/dashboard': {
      id: '/_signed-in/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof SignedInDashboardRouteImport
      parentRoute: typeof SignedInRoute
    }
    '/posts_/$postId/deep': {
      id: '/posts_/$postId/deep'
      path: '/posts/$postId/deep'
      fullPath: '/posts/$postId/deep'
      preLoaderRoute: typeof PostsPostIdDeepRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_signed-in/projects/new': {
      id: '/_signed-in/projects/new'
      path: '/projects/new'
      fullPath: '/projects/new'
      preLoaderRoute: typeof SignedInProjectsNewRouteImport
      parentRoute: typeof SignedInRoute
    }
    '/_signed-in/projects/$projectId/tasks': {
      id: '/_signed-in/projects/$projectId/tasks'
      path: '/projects/$projectId/tasks'
      fullPath: '/projects/$projectId/tasks'
      preLoaderRoute: typeof SignedInProjectsProjectIdTasksRouteImport
      parentRoute: typeof SignedInRoute
    }
    '/_signed-in/projects/$projectId/tasks/$taskId': {
      id: '/_signed-in/projects/$projectId/tasks/$taskId'
      path: '/$taskId'
      fullPath: '/projects/$projectId/tasks/$taskId'
      preLoaderRoute: typeof SignedInProjectsProjectIdTasksTaskIdRouteImport
      parentRoute: typeof SignedInProjectsProjectIdTasksRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/uploadthing': {
      id: '/api/uploadthing'
      path: '/api/uploadthing'
      fullPath: '/api/uploadthing'
      preLoaderRoute: typeof ApiUploadthingServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface SignedInProjectsProjectIdTasksRouteChildren {
  SignedInProjectsProjectIdTasksTaskIdRoute: typeof SignedInProjectsProjectIdTasksTaskIdRoute
}

const SignedInProjectsProjectIdTasksRouteChildren: SignedInProjectsProjectIdTasksRouteChildren =
  {
    SignedInProjectsProjectIdTasksTaskIdRoute:
      SignedInProjectsProjectIdTasksTaskIdRoute,
  }

const SignedInProjectsProjectIdTasksRouteWithChildren =
  SignedInProjectsProjectIdTasksRoute._addFileChildren(
    SignedInProjectsProjectIdTasksRouteChildren,
  )

interface SignedInRouteChildren {
  SignedInDashboardRoute: typeof SignedInDashboardRoute
  SignedInLabelsRoute: typeof SignedInLabelsRoute
  SignedInStatusesRoute: typeof SignedInStatusesRoute
  SignedInProjectsNewRoute: typeof SignedInProjectsNewRoute
  SignedInProjectsProjectIdTasksRoute: typeof SignedInProjectsProjectIdTasksRouteWithChildren
}

const SignedInRouteChildren: SignedInRouteChildren = {
  SignedInDashboardRoute: SignedInDashboardRoute,
  SignedInLabelsRoute: SignedInLabelsRoute,
  SignedInStatusesRoute: SignedInStatusesRoute,
  SignedInProjectsNewRoute: SignedInProjectsNewRoute,
  SignedInProjectsProjectIdTasksRoute:
    SignedInProjectsProjectIdTasksRouteWithChildren,
}

const SignedInRouteWithChildren = SignedInRoute._addFileChildren(
  SignedInRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SignedInRoute: SignedInRouteWithChildren,
  PostsPostIdRoute: PostsPostIdRoute,
  SignInSplatRoute: SignInSplatRoute,
  PostsIndexRoute: PostsIndexRoute,
  PostsPostIdDeepRoute: PostsPostIdDeepRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiUploadthingServerRoute: ApiUploadthingServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
